#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ EpsToTxt2 –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –¥–ª—è Windows
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç PyInstaller –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è standalone –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import os
import sys
import shutil
from pathlib import Path

def create_spec_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ .spec —Ñ–∞–π–ª–∞ –¥–ª—è PyInstaller"""
    spec_content = '''
# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['gui_main.py'],
    pathex=[],
    binaries=[],
    datas=[],
    hiddenimports=[
        'pylibdmtx.pylibdmtx',
        'numpy',
        'PIL',
        'PyQt5.QtCore',
        'PyQt5.QtGui',
        'PyQt5.QtWidgets'
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='EpsToTxt2',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    version='version_info.txt',
    icon='icon.ico'
)
'''
    
    with open('EpsToTxt2.spec', 'w', encoding='utf-8') as f:
        f.write(spec_content.strip())

def create_version_info():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏"""
    version_info = '''
# UTF-8
#
# For more details about fixed file info 'ffi' see:
# http://msdn.microsoft.com/en-us/library/ms646997.aspx
VSVersionInfo(
  ffi=FixedFileInfo(
    # filevers and prodvers should be always a tuple with four items: (1, 2, 3, 4)
    # Set not needed items to zero 0.
    filevers=(2, 0, 0, 0),
    prodvers=(2, 0, 0, 0),
    # Contains a bitmask that specifies the valid bits 'flags'r
    mask=0x3f,
    # Contains a bitmask that specifies the Boolean attributes of the file.
    flags=0x0,
    # The operating system for which this file was designed.
    # 0x4 - NT and there is no need to change it.
    OS=0x4,
    # The general type of file.
    # 0x1 - the file is an application.
    fileType=0x1,
    # The function of the file.
    # 0x0 - the function is not defined for this fileType
    subtype=0x0,
    # Creation date and time stamp.
    date=(0, 0)
    ),
  kids=[
    StringFileInfo(
      [
      StringTable(
        u'040904B0',
        [StringStruct(u'CompanyName', u'Peltik'),
        StringStruct(u'FileDescription', u'EpsToTxt2 - –û–±—Ä–∞–±–æ—Ç–∫–∞ DataMatrix –∫–æ–¥–æ–≤'),
        StringStruct(u'FileVersion', u'2.0.0.0'),
        StringStruct(u'InternalName', u'EpsToTxt2'),
        StringStruct(u'LegalCopyright', u'¬© 2025 Peltik'),
        StringStruct(u'OriginalFilename', u'EpsToTxt2.exe'),
        StringStruct(u'ProductName', u'EpsToTxt2'),
        StringStruct(u'ProductVersion', u'2.0.0.0')])
      ]), 
    VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
  ]
)
'''
    
    with open('version_info.txt', 'w', encoding='utf-8') as f:
        f.write(version_info.strip())

def create_icon():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∏–∫–æ–Ω–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∞—è –∏–∫–æ–Ω–∫–∞
    # –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
    if not os.path.exists('icon.ico'):
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É 16x16 –ø–∏–∫—Å–µ–ª–µ–π
        from PIL import Image, ImageDraw
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 32x32 –¥–ª—è –∏–∫–æ–Ω–∫–∏
        img = Image.new('RGBA', (32, 32), (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)
        
        # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É - —Å–∏–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç —Å –±–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º
        draw.rectangle([2, 2, 30, 30], fill=(74, 144, 226, 255))
        draw.text((8, 12), "ET", fill=(255, 255, 255, 255))
        
        img.save('icon.ico', format='ICO')
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–∫–æ–Ω–∫–∞ icon.ico")

def build_executable():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É EpsToTxt2 –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = ['gui_main.py', 'main.py']
    for file in required_files:
        if not os.path.exists(file):
            print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–±–æ—Ä–∫–∏
    print("üìù –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    create_spec_file()
    create_version_info()
    create_icon()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PyInstaller
    try:
        import PyInstaller
        print(f"‚úÖ PyInstaller –Ω–∞–π–¥–µ–Ω: –≤–µ—Ä—Å–∏—è {PyInstaller.__version__}")
    except ImportError:
        print("‚ùå PyInstaller –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: pip install pyinstaller")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É
    print("üî® –ó–∞–ø—É—Å–∫–∞–µ–º PyInstaller...")
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–±–æ—Ä–∫–∏
    if os.path.exists('dist'):
        shutil.rmtree('dist')
    if os.path.exists('build'):
        shutil.rmtree('build')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å–±–æ—Ä–∫–∏
    import subprocess
    
    cmd = [
        sys.executable, '-m', 'PyInstaller',
        '--onefile',                    # –û–¥–∏–Ω —Ñ–∞–π–ª
        '--windowed',                   # –ë–µ–∑ –∫–æ–Ω—Å–æ–ª–∏
        '--name=EpsToTxt2',            # –ò–º—è —Ñ–∞–π–ª–∞
        '--icon=icon.ico',             # –ò–∫–æ–Ω–∫–∞
        '--version-file=version_info.txt',  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
        '--add-data=README.md;.',      # –î–æ–±–∞–≤–ª—è–µ–º README
        '--add-data=OPTIMIZATIONS.md;.',  # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        '--hidden-import=pylibdmtx.pylibdmtx',
        '--hidden-import=numpy',
        '--hidden-import=PIL',
        'gui_main.py'
    ]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        exe_path = Path('dist') / 'EpsToTxt2.exe'
        if exe_path.exists():
            size_mb = exe_path.stat().st_size / (1024 * 1024)
            print(f"üì¶ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {exe_path}")
            print(f"üìè –†–∞–∑–º–µ—Ä: {size_mb:.1f} MB")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ In –∏ Out —Ä—è–¥–æ–º —Å exe
            dist_path = Path('dist')
            (dist_path / 'In').mkdir(exist_ok=True)
            (dist_path / 'Out').mkdir(exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
            if os.path.exists('README.md'):
                shutil.copy2('README.md', dist_path / 'README.md')
            if os.path.exists('OPTIMIZATIONS.md'):
                shutil.copy2('OPTIMIZATIONS.md', dist_path / 'OPTIMIZATIONS.md')
            
            print("üìÅ –°–æ–∑–¥–∞–Ω—ã –ø–∞–ø–∫–∏ In –∏ Out")
            print("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
            print(f"üéâ –ì–æ—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ: {dist_path.absolute()}")
            
            return True
        else:
            print("‚ùå –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω!")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {e}")
        print(f"–í—ã–≤–æ–¥: {e.stdout}")
        print(f"–û—à–∏–±–∫–∏: {e.stderr}")
        return False

def clean_build_files():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–±–æ—Ä–∫–∏"""
    files_to_remove = [
        'EpsToTxt2.spec',
        'version_info.txt',
        'icon.ico'
    ]
    
    dirs_to_remove = [
        'build',
        '__pycache__'
    ]
    
    for file in files_to_remove:
        if os.path.exists(file):
            os.remove(file)
            print(f"üóë –£–¥–∞–ª–µ–Ω: {file}")
    
    for dir_name in dirs_to_remove:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"üóë –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {dir_name}")

if __name__ == "__main__":
    print("=" * 60)
    print("EpsToTxt2 - –°–±–æ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è Windows")
    print("=" * 60)
    
    success = build_executable()
    
    if success:
        print("\n" + "=" * 60)
        print("‚úÖ –°–ë–û–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–ø–∫—É dist/")
        print("2. –ü–æ–º–µ—Å—Ç–∏—Ç–µ ZIP –∞—Ä—Ö–∏–≤—ã –≤ –ø–∞–ø–∫—É In/")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ EpsToTxt2.exe")
        print("4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≤ –ø–∞–ø–∫–µ Out/")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± –æ—á–∏—Å—Ç–∫–µ
        response = input("\nüóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–±–æ—Ä–∫–∏? (y/n): ")
        if response.lower() in ['y', 'yes', '–¥', '–¥–∞']:
            clean_build_files()
            print("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
    else:
        print("\n" + "=" * 60)
        print("‚ùå –°–ë–û–†–ö–ê –ó–ê–í–ï–†–®–ò–õ–ê–°–¨ –° –û–®–ò–ë–ö–û–ô!")
        print("=" * 60)
        print("\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ PyInstaller: pip install pyinstaller")
        print("2. –í—Å–µ –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install -r requirements.txt")
        print("3. –ù–µ—Ç –ª–∏ –æ—à–∏–±–æ–∫ –≤ –∫–æ–¥–µ")
